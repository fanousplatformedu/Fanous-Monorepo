# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RecommendationEntity {
  id: ID!
  createdAt: DateTime!
  tenantId: String!
  resultId: String!
  targetJson: JSON
  targetMajorId: String
  targetCareerId: String
  type: RecommendationType!
  explainabilityFactors: JSON
  confidence: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum RecommendationType {
  CAREER
  MAJOR
  LEARNING
}

type RecommendationPageEntity {
  page: Int!
  total: Int!
  pageSize: Int!
  items: [RecommendationEntity!]!
}

type GenerateResult {
  created: Int!
}

type PreviewPayload {
  tenantId: String!
  resultId: String!
  previewJson: String!
  assessmentId: String!
}

type QuestionnaireEntity {
  id: ID!
  code: String!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  tenantId: String!
  defaultLang: LanguageCode!
  deletedAt: DateTime
  description: String
}

enum LanguageCode {
  FA
  EN
  AR
}

type PageResultQuestionnaire {
  page: Int!
  total: Int!
  pageSize: Int!
  items: [QuestionnaireEntity!]!
}

type AssessmentVersionEntity {
  id: ID!
  createdAt: DateTime!
  tenantId: String!
  versionNumber: Int!
  questionnaireId: String!
  status: VersionStatus!
  publishedAt: DateTime
  changelog: String
  interpretationJson: String
}

enum VersionStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type QuestionEntity {
  id: ID!
  order: Int!
  text: String!
  tenantId: String!
  required: Boolean!
  questionnaireId: String!
  type: QuestionType!
  code: String
  helpText: String
  configJson: String
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  SCALE
  TEXT
  MATRIX
}

type OptionEntity {
  id: ID!
  order: Int!
  text: String!
  value: String!
  tenantId: String!
  questionId: String!
  weight: Float
}

type NotificationTemplateEntity {
  id: ID!
  code: String!
  createdAt: DateTime!
  tenantId: String!
  lang: LanguageCode!
  body: String
  channel: NotificationChannel!
  subject: String
  bodyJson: JSON
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
}

type NotificationEntity {
  id: ID!
  tenantId: String!
  createdAt: DateTime!
  status: NotificationStatus!
  meta: String
  channel: NotificationChannel!
  userId: String
  payload: String
  templateId: String
  sentAt: DateTime
}

enum NotificationStatus {
  QUEUED
  SENT
  FAILED
  DELIVERED
  OPENED
}

type NotificationPageEntity {
  page: Int!
  total: Int!
  pageSize: Int!
  items: [NotificationEntity!]!
}

type TemplatePageEntity {
  items: [NotificationTemplateEntity!]!
  total: Int!
  page: Int!
  pageSize: Int!
}

type SendResult {
  sent: Int!
  queued: Int!
  failed: Int!
}

type PreviewResult {
  tenantId: String!
  templateId: String!
  body: String
  subject: String
  bodyJson: String
}

type AssessmentEntity {
  id: ID!
  startedAt: DateTime!
  userId: String!
  tenantId: String!
  language: LanguageCode!
  state: AssessmentState!
  scoredAt: DateTime
  submittedAt: DateTime
  versionId: String
  assignmentId: String
}

enum AssessmentState {
  IN_PROGRESS
  SUBMITTED
  SCORED
}

type PageResultAssessments {
  page: Int!
  total: Int!
  pageSize: Int!
  items: [AssessmentEntity!]!
}

type ResultSnapshotEntity {
  id: ID!
  createdAt: DateTime!
  userId: String!
  tenantId: String!
  scoresJson: String!
  summaryJson: String!
  assessmentId: String!
}

type ResponseEntity {
  id: ID!
  value: String!
  createdAt: DateTime!
  tenantId: String!
  questionId: String!
  assessmentId: String!
}

type ScoreEntity {
  id: ID!
  value: Float!
  createdAt: DateTime!
  metric: String!
  tenantId: String!
  assessmentId: String!
  meta: String
  weight: Float
}

type RecomputeTenantResult {
  processed: Int!
  tenantId: String!
}

type ComputedMetricEntity {
  key: String!
  value: Float!
  raw: Float
  label: String
}

type ScoringPreviewEntity {
  tenantId: String!
  scoresJson: String!
  summaryJson: String!
  assessmentId: String!
  metrics: [ComputedMetricEntity!]!
}

type TenantSettingsEntity {
  id: ID!
  tenantId: String!
  defaultLanguage: LanguageCode!
  brandingJson: String
  retentionDays: Float
  ssoConfigJson: String
  webhookConfigJson: String
  allowedLanguages: [LanguageCode!]
}

type SubscriptionEntity {
  id: ID!
  createdAt: DateTime!
  tenantId: String!
  currentPeriodEnd: DateTime!
  plan: LicensePlan!
  currentPeriodStart: DateTime!
  cancelAtPeriodEnd: Boolean!
  status: SubscriptionStatus!
}

enum LicensePlan {
  FREE
  STANDARD
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

type LicenseEntity {
  id: ID!
  seats: Int!
  startsAt: DateTime!
  createdAt: DateTime!
  tenantId: String!
  plan: LicensePlan!
  endsAt: DateTime
}

type TenantEntity {
  id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  settings: TenantSettingsEntity
  licenses: [LicenseEntity!]
  subscriptions: [SubscriptionEntity!]
}

type TenantPageResult {
  page: Int!
  total: Int!
  pageSize: Int!
  items: [TenantEntity!]!
}

type ClassroomEntity {
  id: ID!
  year: Int!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  gradeId: String!
  tenantId: String!
  code: String
  deletedAt: DateTime
}

type GradeEntity {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  tenantId: String!
  code: String
  deletedAt: DateTime
}

type PageResultGrades {
  page: Int!
  total: Int!
  pageSize: Int!
  items: [GradeEntity!]!
}

type PageResultClassrooms {
  page: Int!
  total: Int!
  pageSize: Int!
  items: [ClassroomEntity!]!
}

type EnrollmentEntity {
  id: ID!
  startedAt: DateTime!
  tenantId: String!
  classroomId: String!
  studentId: String!
  endedAt: DateTime
}

type UserEntity {
  id: ID!
  role: Role!
  name: String!
  email: String!
  learningHours: Int!
  coursesEnrolled: Int!
  certificatesEarned: Int!
  bio: String
  joinDate: DateTime
  phone: String
  avatar: String
  website: String
  location: String
  education: String
  occupation: String
}

"""User role"""
enum Role {
  ADMIN
  PARENT
  STUDENT
  TEACHER
  COUNSELOR
  SUPER_ADMIN
  CONTENT_EDITOR
}

type AuthPayloadEntity {
  name: String!
  id: ID!
  accessToken: String!
  role: Role!
  avatar: String
}

type Query {
  healthCheck: String!
  me: UserEntity!
  tenantById(id: ID!): TenantEntity!
  tenantBySlug(slug: String!): TenantEntity!
  tenants(input: TenantPageInput!): TenantPageResult!
  grades(input: GradePageInput!): PageResultGrades!
  classrooms(input: ClassroomPageInput!): PageResultClassrooms!
  enrollmentsByClassroom(tenantId: String!, classroomId: String!): [EnrollmentEntity!]!
  previewScoring(input: PreviewScoringInput!): ScoringPreviewEntity!
  assessments(input: AssessmentsPageInput!): PageResultAssessments!
  myAssessments(input: AssessmentsByMeInput!): PageResultAssessments!
  assessmentById(tenantId: String!, assessmentId: ID!): AssessmentEntity!
  assessmentResult(tenantId: String!, assessmentId: ID!): ResultSnapshotEntity!
  assessmentScores(tenantId: String!, assessmentId: ID!): [ScoreEntity!]!
  assessmentResponses(tenantId: String!, assessmentId: ID!): [ResponseEntity!]!
  notificationTemplates(input: ListNotificationTemplatesInput!): TemplatePageEntity!
  previewNotification(input: PreviewNotificationInput!): PreviewResult!
  notifications(input: ListNotificationsInput!): NotificationPageEntity!
  questionnaires(input: QuestionnairePageInput!): PageResultQuestionnaire!
  previewRecommendations(input: PreviewRecommendationsInput!): PreviewPayload!
  recommendations(input: ListRecommendationsInput!): RecommendationPageEntity!
}

input TenantPageInput {
  search: String
  page: Int! = 1
  pageSize: Int! = 20
  includeDeleted: Boolean! = false
}

input GradePageInput {
  tenantId: String!
  search: String
  page: Int! = 1
  pageSize: Int! = 20
  includeDeleted: Boolean! = false
}

input ClassroomPageInput {
  tenantId: String!
  search: String
  gradeId: String
  page: Int! = 1
  pageSize: Int! = 20
  includeDeleted: Boolean! = false
}

input PreviewScoringInput {
  tenantId: String!
  assessmentId: String!
}

input AssessmentsPageInput {
  tenantId: String!
  userId: String
  page: Int! = 1
  pageSize: Int! = 20
  state: AssessmentState
}

input AssessmentsByMeInput {
  tenantId: String!
  page: Int! = 1
  pageSize: Int! = 20
}

input ListNotificationTemplatesInput {
  tenantId: String!
  code: String
  page: Int! = 1
  pageSize: Int! = 20
  lang: String
  channel: String
}

input PreviewNotificationInput {
  tenantId: String!
  templateId: String!
  variables: String
}

input ListNotificationsInput {
  tenantId: String!
  userId: String
  page: Int! = 1
  pageSize: Int! = 20
  status: String
  channel: String
}

input QuestionnairePageInput {
  tenantId: String!
  search: String
  page: Int! = 1
  pageSize: Int! = 20
  includeDeleted: Boolean! = false
}

input PreviewRecommendationsInput {
  tenantId: String!
  assessmentId: String!
  types: [RecommendationType!]! = [CAREER, MAJOR]
  topN: Int! = 10
}

input ListRecommendationsInput {
  tenantId: String!
  resultId: String
  assessmentId: String
  page: Int! = 1
  pageSize: Int! = 20
  type: RecommendationType
}

type Mutation {
  requestOtp(input: RequestOtpInput!): Boolean!
  verifyOtp(input: VerifyOtpInput!): AuthPayloadEntity!
  updateMe(input: UpdateMeInput!): UserEntity!
  createTenant(input: CreateTenantInput!): TenantEntity!
  updateTenant(input: UpdateTenantInput!): TenantEntity!
  archiveTenant(id: ID!): Boolean!
  restoreTenant(id: ID!): Boolean!
  setTenantSettings(input: SetTenantSettingsInput!): TenantSettingsEntity!
  assignLicense(input: AssignLicenseInput!): LicenseEntity!
  createSubscription(input: CreateSubscriptionInput!): SubscriptionEntity!
  createGrade(input: CreateGradeInput!): GradeEntity!
  updateGrade(input: UpdateGradeInput!): GradeEntity!
  archiveGrade(id: ID!, tenantId: String!): Boolean!
  restoreGrade(id: ID!, tenantId: String!): Boolean!
  createClassroom(input: CreateClassroomInput!): ClassroomEntity!
  updateClassroom(input: UpdateClassroomInput!): ClassroomEntity!
  archiveClassroom(id: ID!, tenantId: String!): Boolean!
  restoreClassroom(id: ID!, tenantId: String!): Boolean!
  enrollStudent(input: EnrollStudentInput!): EnrollmentEntity!
  closeEnrollment(input: CloseEnrollmentInput!): EnrollmentEntity!
  runScoringStrict(input: RunScoringStrictInput!): Boolean!
  recomputeTenantScores(input: RecomputeTenantInput!): RecomputeTenantResult!
  startAssessment(input: StartAssessmentInput!): AssessmentEntity!
  saveResponse(input: SaveResponseInput!): ResponseEntity!
  saveResponsesBulk(input: SaveResponsesBulkInput!): Boolean!
  submitAssessment(input: SubmitAssessmentInput!): AssessmentEntity!
  runScoring(input: RunScoringInput!): AssessmentEntity!
  createNotificationTemplate(input: CreateNotificationTemplateInput!): NotificationTemplateEntity!
  updateNotificationTemplate(input: UpdateNotificationTemplateInput!): NotificationTemplateEntity!
  sendNotificationsByTemplate(input: SendTemplateInput!): SendResult!
  sendAdHocNotification(input: SendAdHocNotificationInput!): SendResult!
  markNotificationStatus(input: MarkNotificationStatusInput!): Boolean!
  createQuestionnaire(input: CreateQuestionnaireInput!): QuestionnaireEntity!
  updateQuestionnaire(input: UpdateQuestionnaireInput!): QuestionnaireEntity!
  archiveQuestionnaire(id: ID!, tenantId: String!): Boolean!
  restoreQuestionnaire(id: ID!, tenantId: String!): Boolean!
  createAssessmentVersion(input: CreateAssessmentVersionInput!): AssessmentVersionEntity!
  publishVersion(input: PublishVersionInput!): AssessmentVersionEntity!
  createQuestion(input: CreateQuestionInput!): QuestionEntity!
  updateQuestion(input: UpdateQuestionInput!): QuestionEntity!
  reorderQuestions(input: ReorderQuestionsInput!): Boolean!
  createOption(input: CreateOptionInput!): OptionEntity!
  updateOption(input: UpdateOptionInput!): OptionEntity!
  reorderOptions(input: ReorderOptionsInput!): Boolean!
  generateRecommendations(input: GenerateRecommendationsInput!): GenerateResult!
  deleteRecommendation(input: DeleteRecommendationInput!): Boolean!
}

input RequestOtpInput {
  mobile: String!
  fullName: String!
}

input VerifyOtpInput {
  mobile: String!
  code: String!
}

input UpdateMeInput {
  bio: String
  name: String
  website: String
  phone: String
  avatar: String
  location: String
  education: String
  occupation: String
}

input CreateTenantInput {
  name: String!
  slug: String!
}

input UpdateTenantInput {
  id: ID!
  slug: String
  name: String
}

input SetTenantSettingsInput {
  tenantId: ID!
  brandingJson: String
  ssoConfigJson: String
  webhookConfigJson: String
  defaultLanguage: LanguageCode
  allowedLanguages: [LanguageCode!]
  retentionDays: Float
}

input AssignLicenseInput {
  tenantId: ID!
  startsAt: DateTime!
  plan: LicensePlan!
  seats: Int!
  endsAt: DateTime
}

input CreateSubscriptionInput {
  tenantId: ID!
  currentPeriodEnd: DateTime!
  plan: LicensePlan!
  currentPeriodStart: DateTime!
  cancelAtPeriodEnd: Boolean! = false
}

input CreateGradeInput {
  name: String!
  tenantId: String!
  code: String
}

input UpdateGradeInput {
  tenantId: String!
  id: ID!
  name: String
  code: String
}

input CreateClassroomInput {
  name: String!
  gradeId: String!
  tenantId: String!
  code: String
  year: Int!
}

input UpdateClassroomInput {
  id: ID!
  tenantId: String!
  gradeId: String
  name: String
  code: String
  year: Int
}

input EnrollStudentInput {
  tenantId: String!
  studentId: String!
  classroomId: String!
  startedAt: DateTime
}

input CloseEnrollmentInput {
  tenantId: String!
  id: ID!
  endedAt: DateTime
}

input RunScoringStrictInput {
  tenantId: String!
  assessmentId: String!
  overwrite: Boolean! = true
}

input RecomputeTenantInput {
  tenantId: String!
  batchSize: Int! = 100
}

input StartAssessmentInput {
  tenantId: String!
  versionId: String
  assignmentId: String
  language: LanguageCode! = FA
}

input SaveResponseInput {
  value: String!
  tenantId: String!
  questionId: String!
  assessmentId: String!
}

input SaveResponsesBulkInput {
  tenantId: String!
  itemsJson: String!
  assessmentId: String!
}

input SubmitAssessmentInput {
  tenantId: String!
  assessmentId: String!
}

input RunScoringInput {
  tenantId: String!
  assessmentId: String!
}

input CreateNotificationTemplateInput {
  code: String!
  tenantId: String!
  lang: String!
  body: String
  subject: String
  bodyJson: String
  channel: String!
}

input UpdateNotificationTemplateInput {
  id: String!
  tenantId: String!
  body: String
  subject: String
  bodyJson: String
}

input SendTemplateInput {
  tenantId: String!
  templateId: String!
  variables: String
  audienceJson: String
  queueOnly: Boolean! = false
  userIds: [String!]
}

input SendAdHocNotificationInput {
  payload: String!
  tenantId: String!
  userIds: [String!]!
  channel: String!
  queueOnly: Boolean! = false
}

input MarkNotificationStatusInput {
  id: String!
  tenantId: String!
  meta: String
  status: String!
}

input CreateQuestionnaireInput {
  code: String!
  title: String!
  tenantId: String!
  description: String
  defaultLang: LanguageCode!
}

input UpdateQuestionnaireInput {
  tenantId: String!
  id: ID!
  code: String
  title: String
  description: String
  defaultLang: LanguageCode
}

input CreateAssessmentVersionInput {
  tenantId: String!
  questionnaireId: ID!
  changelog: String
  interpretationJson: String
}

input PublishVersionInput {
  tenantId: String!
  versionId: ID!
}

input CreateQuestionInput {
  text: String!
  tenantId: String!
  questionnaireId: String!
  code: String
  helpText: String
  type: QuestionType!
  configJson: String
  required: Boolean! = true
  order: Int
}

input UpdateQuestionInput {
  tenantId: String!
  id: ID!
  type: QuestionType
  code: String
  text: String
  helpText: String
  order: Int
  required: Boolean
  configJson: String
}

input ReorderQuestionsInput {
  tenantId: String!
  itemsJson: String!
  questionnaireId: String!
}

input CreateOptionInput {
  text: String!
  value: String!
  tenantId: String!
  questionId: String!
  weight: Float
  order: Int
}

input UpdateOptionInput {
  tenantId: String!
  id: ID!
  text: String
  value: String
  weight: Float
  order: Int
}

input ReorderOptionsInput {
  tenantId: String!
  itemsJson: String!
  questionId: String!
}

input GenerateRecommendationsInput {
  tenantId: String!
  assessmentId: String!
  minConfidence: Float! = 0
  overwrite: Boolean! = true
  topN: Int! = 10
  types: [RecommendationType!]! = [CAREER, MAJOR]
}

input DeleteRecommendationInput {
  id: String!
  tenantId: String!
}